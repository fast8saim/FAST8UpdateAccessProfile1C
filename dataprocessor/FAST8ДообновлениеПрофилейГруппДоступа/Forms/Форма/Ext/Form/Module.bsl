///////////////////////////////////////////////////////////////////////////////
// FAST8.RU
// 2019
// ПОСТАВЛЯЕТСЯ AS IS
//

&НаКлиенте
Процедура wwwfastruНажатие(Элемент)
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ПустоеОповещение", ЭтаФорма), "https://fast8.ru",, Ложь);
	
КонецПроцедуры // wwwfastruНажатие()

&НаКлиенте
Процедура ПустоеОповещение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры // ПустоеОповещение()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗаменяемыеРоли();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ЗаменитьРолиВПрофилях(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаменитьРолиВПрофиляхЗавершение", ЭтаФорма), "Операция необратима. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // ЗаменитьРолиВПрофилях()

&НаКлиенте
Процедура ЗаменитьРолиВПрофиляхЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		ЗаменитьРолиВПрофиляхНаСервере();
	КонецЕсли;

КонецПроцедуры // ЗаменитьРолиВПрофиляхЗавершение()

&НаКлиенте
Процедура СоответствиеРолейНоваяРольНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеПриЗакрытии = Новый ОписаниеОповещения("СоответствиеРолейНоваяРольЗавершение", ЭтаФорма);
	ОткрытьФорму("ВнешняяОбработка.FAST8ДообновлениеПрофилейГруппДоступа.Форма.ВыборРоли",, Элемент,,,, ОповещениеПриЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // СоответствиеРолейНоваяРольНачалоВыбора()

&НаКлиенте
Процедура СоответствиеРолейНоваяРольЗавершение(РезультатВыбора, Дополнительно) Экспорт
	
	ТекущиеДанные = Элементы.СоответствиеРолей.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.НоваяРоль = РезультатВыбора;
	КонецЕсли;
	СоответствиеРолейНоваяРольПриИзменении(Элементы.СоответствиеРолей);
	
КонецПроцедуры // СоответствиеРолейНоваяРольЗавершение()

&НаКлиенте
Процедура СоответствиеРолейПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.СоответствиеРолей.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда 
		ВыбраннаяРоль = ПредопределенноеЗначение("Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка");
	Иначе
		ВыбраннаяРоль = ТекущаяСтрока.СтараяРоль;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("Роль", ВыбраннаяРоль);
	Элементы.ОбрабатываемыеПрофили.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
КонецПроцедуры // СоответствиеРолейПриАктивизацииСтроки()

&НаКлиенте
Процедура ОбрабатываемыеПрофилиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ОбрабатываемыеПрофили.ТекущиеДанные;
	ПоказатьЗначение(Новый ОписаниеОповещения("ПустоеОповещение", ЭтаФорма), ТекущаяСтрока.Профиль);
	
КонецПроцедуры // ОбрабатываемыеПрофилиВыбор()

&НаСервере
Процедура ЗаполнитьЗаменяемыеРоли()
	
	Объект.СоответствиеРолей.Очистить();
	ОбрабатываемыеПрофили.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступаРоли.Роль КАК Роль,
	|	ВЫРАЗИТЬ(ПрофилиГруппДоступаРоли.Роль КАК Справочник.ИдентификаторыОбъектовМетаданных).Наименование КАК Наименование,
	|	ПрофилиГруппДоступаРоли.Ссылка КАК Профиль
	|ПОМЕСТИТЬ ВТ_ПрофилиРоли
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	|ГДЕ
	|	(ПрофилиГруппДоступаРоли.Роль ССЫЛКА Справочник.ИдентификаторыОбъектовМетаданных
	|			ИЛИ ПрофилиГруппДоступаРоли.Роль ССЫЛКА Справочник.ИдентификаторыОбъектовРасширений)
	|	И (ПрофилиГруппДоступаРоли.Роль.ПометкаУдаления
	|			ИЛИ ПрофилиГруппДоступаРоли.Роль.Имя ПОДОБНО ""Удалить%"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПрофилиРоли.Роль КАК Роль,
	|	ВТ_ПрофилиРоли.Профиль КАК Профиль,
	|	ВТ_ПрофилиРоли.Профиль.Наименование КАК Наименование
	|ИЗ
	|	ВТ_ПрофилиРоли КАК ВТ_ПрофилиРоли
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПрофилиРоли.Роль КАК Роль,
	|	ВТ_ПрофилиРоли.Наименование КАК Наименование
	|ИЗ
	|	ВТ_ПрофилиРоли КАК ВТ_ПрофилиРоли
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат.Получить(1).Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ОбрабатываемыеПрофили.Добавить();
		НоваяСтрока.Профиль = Выборка.Профиль;
		НоваяСтрока.Роль = Выборка.Роль;
	КонецЦикла;
	
	Выборка = Результат.Получить(2).Выбрать();
	Пока Выборка.Следующий() Цикл 
		НоваяСтрока = Объект.СоответствиеРолей.Добавить();
		НоваяСтрока.СтараяРоль	= Выборка.Роль;
		НоваяСтрока.Действие	= "Пропустить";
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЗаменяемыеРоли()

&НаСервере
Процедура ЗаменитьРолиВПрофиляхНаСервере()
	
	ЗаменаРолей = Новый Соответствие;
	СтарыеРоли = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.СоответствиеРолей Цикл 
		Если ЗначениеЗаполнено(СтрокаТЧ.НоваяРоль) И СтрокаТЧ.Действие = "Заменить" Тогда 
			ЗаменаРолей.Вставить(СтрокаТЧ.СтараяРоль, СтрокаТЧ.НоваяРоль);
			СтарыеРоли.Добавить(СтрокаТЧ.СтараяРоль);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступаРоли.Ссылка КАК Профиль,
	|	ПрофилиГруппДоступаРоли.НомерСтроки КАК НомерСтроки,
	|	ПрофилиГруппДоступаРоли.Роль КАК Роль,
	|	ПрофилиГруппДоступаРоли.Ссылка.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	|ГДЕ
	|	ПрофилиГруппДоступаРоли.Роль В(&СтарыеРоли)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|ИТОГИ
	|	МАКСИМУМ(Наименование)
	|ПО
	|	Профиль";
	Запрос.УстановитьПараметр("СтарыеРоли", СтарыеРоли);
	ВыборкаПрофиль = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	ШаблонТекста = НСтр("ru='Профиль %1 изменен.'");
	
	Пока ВыборкаПрофиль.Следующий() Цикл 
		ПрофильОбъект = ВыборкаПрофиль.Профиль.ПолучитьОбъект();
		
		ВыборкаРоль = ВыборкаПрофиль.Выбрать();
		Пока ВыборкаРоль.Следующий() Цикл 
			СтрокаТЧ = ПрофильОбъект.Роли.Получить(ВыборкаРоль.НомерСтроки - 1);
			СтрокаТЧ.Роль = ЗаменаРолей.Получить(СтрокаТЧ.Роль);
		КонецЦикла;
		
		Попытка
			ПрофильОбъект.Записать();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблонТекста, ВыборкаПрофиль.Наименование));
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Прервать;
		КонецПопытки;		
	КонецЦикла;
	
    СтарыеРоли = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.СоответствиеРолей Цикл 
		Если СтрокаТЧ.Действие = "Удалить" Тогда
			СтарыеРоли.Добавить(СтрокаТЧ.СтараяРоль);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступаРоли.Ссылка КАК Профиль,
	|	ПрофилиГруппДоступаРоли.Ссылка.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	|ГДЕ
	|	ПрофилиГруппДоступаРоли.Роль В(&СтарыеРоли)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	Запрос.УстановитьПараметр("СтарыеРоли", СтарыеРоли);
	ВыборкаПрофиль = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	ШаблонТекста = НСтр("ru='Профиль %1 изменен.'");
	
	Пока ВыборкаПрофиль.Следующий() Цикл 
		ПрофильОбъект = ВыборкаПрофиль.Профиль.ПолучитьОбъект();
		
		МассивУдалить = Новый Массив;
		Для Каждого РольУдалить Из СтарыеРоли Цикл
			СтрокиУдалить = ПрофильОбъект.Роли.НайтиСтроки(Новый Структура("Роль", РольУдалить));
			Если СтрокиУдалить.Количество() Тогда
				МассивУдалить.Добавить(СтрокиУдалить.Получить(0));
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаУдалить Из МассивУдалить Цикл
			ПрофильОбъект.Роли.Удалить(СтрокаУдалить);
		КонецЦикла;
		
		Попытка
			ПрофильОбъект.Записать();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблонТекста, ВыборкаПрофиль.Наименование));
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Прервать;
		КонецПопытки;		
	КонецЦикла;
		
	ЗаполнитьЗаменяемыеРоли();
	
КонецПроцедуры // ЗаменитьРолиВПрофиляхНаСервере()

&НаКлиенте
Процедура СохранитьСоответствие(Команда)
    
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбора.Заголовок			= "Укажите файл сохранения настроек";
	ДиалогВыбора.Расширение			= "json";
	ДиалогВыбора.Фильтр				= "json|*.json";
	ДиалогВыбора.МножественныйВыбор	= Ложь;
	ДиалогВыбора.Показать(Новый ОписаниеОповещения("СохранитьСоответствиеЗавершение", ЭтаФорма));
	
КонецПроцедуры // СохранитьСоответствие()

&НаСервере
Процедура ЗаполнитьПолныеИмена()

	МассивРолей = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.СоответствиеРолей Цикл
		МассивРолей.Добавить(СтрокаТЧ.СтараяРоль);
		МассивРолей.Добавить(СтрокаТЧ.НоваяРоль);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыОбъектовМетаданных.Ссылка КАК Ссылка,
	|	ИдентификаторыОбъектовМетаданных.ПолноеИмя КАК ПолноеИмя
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|ГДЕ
	|	ИдентификаторыОбъектовМетаданных.Ссылка В(&Роли)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИдентификаторыОбъектовРасширений.Ссылка,
	|	ИдентификаторыОбъектовРасширений.ПолноеИмя
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовРасширений КАК ИдентификаторыОбъектовРасширений
	|ГДЕ
	|	ИдентификаторыОбъектовРасширений.Ссылка В(&Роли)";
	Запрос.УстановитьПараметр("Роли", МассивРолей);
	
	ИменаРолей = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИменаРолей.Вставить(Выборка.Ссылка, Выборка.ПолноеИмя);
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Объект.СоответствиеРолей Цикл
		СтрокаТЧ.СтараяРольИмя = ИменаРолей.Получить(СтрокаТЧ.СтараяРоль);
		Если ЗначениеЗаполнено(СтрокаТЧ.НоваяРоль) Тогда
			СтрокаТЧ.НоваяРольИмя = ИменаРолей.Получить(СтрокаТЧ.НоваяРоль);
		Иначе
			СтрокаТЧ.НоваяРольИмя = "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПолныеИмена()

&НаКлиенте
Процедура СохранитьСоответствиеЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьПолныеИмена();
	
	ВыборСделан = (ВыбранныеФайлы <> Неопределено);
	Если Не ВыборСделан Тогда
		Возврат;
	КонецЕсли;
	Если ВыбранныеФайлы.Количество() Тогда
		
		ЗаписьДжсон = Новый ЗаписьJSON;
		ЗаписьДжсон.ОткрытьФайл(ВыбранныеФайлы.Получить(0));
		ЗаписьДжсон.ЗаписатьНачалоМассива();
		
		Для Каждого СтрокаТЧ Из Объект.СоответствиеРолей Цикл
			Если СтрокаТЧ.Действие = "Пропустить" Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьДжсон.ЗаписатьНачалоОбъекта();
			ЗаписьДжсон.ЗаписатьИмяСвойства("СтараяРоль");
			ЗаписьДжсон.ЗаписатьЗначение(СтрокаТЧ.СтараяРольИмя);
			ЗаписьДжсон.ЗаписатьИмяСвойства("НоваяРоль");
			ЗаписьДжсон.ЗаписатьЗначение(СтрокаТЧ.НоваяРольИмя);
			ЗаписьДжсон.ЗаписатьИмяСвойства("Действие");
			ЗаписьДжсон.ЗаписатьЗначение(СтрокаТЧ.Действие);
			ЗаписьДжсон.ЗаписатьКонецОбъекта();
		КонецЦикла;
		ЗаписьДжсон.ЗаписатьКонецМассива();
		
		ЗаписьДжсон.Закрыть();
	КонецЕсли;

КонецПроцедуры // СохранитьСоответствиеЗавершение()

&НаКлиенте
Процедура ЗагрузитьСоответствие(Команда)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Заголовок			= "Укажите файл настроек";
	ДиалогВыбора.Расширение			= "json";
	ДиалогВыбора.Фильтр				= "json|*.json";
	ДиалогВыбора.МножественныйВыбор	= Ложь;
	ДиалогВыбора.Показать(Новый ОписаниеОповещения("ЗагрузитьСоответствиеЗавершение", ЭтаФорма));
	
КонецПроцедуры // ЗагрузитьСоответствие()

&НаКлиенте
Процедура ЗагрузитьСоответствиеЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьПолныеИмена();
	
	ВыборСделан = (ВыбранныеФайлы <> Неопределено);
	Если Не ВыборСделан Тогда
		Возврат;
	КонецЕсли;
	Если ВыбранныеФайлы.Количество() Тогда
		
		ЧтениеДжсон = Новый ЧтениеJSON;
		ЧтениеДжсон.ОткрытьФайл(ВыбранныеФайлы.Получить(0));
		
		Содержимое = ПрочитатьJSON(ЧтениеДжсон);
		МассивИмен = Новый Массив;
		
		Для Каждого СтрокаТЧ Из Содержимое Цикл
			СтрокиРолей = Объект.СоответствиеРолей.НайтиСтроки(Новый Структура("СтараяРольИмя", СтрокаТЧ.СтараяРоль));
			Если СтрокиРолей.Количество() Тогда
				СтрокаРолей = СтрокиРолей.Получить(0);
				СтрокаРолей.Действие		= СтрокаТЧ.Действие;
				СтрокаРолей.НоваяРоль		= Неопределено;
				СтрокаРолей.НоваяРольИмя	= СтрокаТЧ.НоваяРоль;
				МассивИмен.Добавить(СтрокаТЧ.НоваяРоль);
			КонецЕсли;
		КонецЦикла;
				
		ЧтениеДжсон.Закрыть();
		
		ЗаполнитьНовыеРоли(МассивИмен);
	КонецЕсли;

КонецПроцедуры // ЗагрузитьСоответствиеЗавершение()

&НаСервере
Функция ЗаполнитьНовыеРоли(МассивИмен)
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыОбъектовМетаданных.Ссылка КАК Ссылка,
	|	ИдентификаторыОбъектовМетаданных.ПолноеИмя КАК ПолноеИмя
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|ГДЕ
	|	ИдентификаторыОбъектовМетаданных.Родитель.Наименование = ""Роли""
	|	И ИдентификаторыОбъектовМетаданных.ПолноеИмя В(&ПолныеИмена)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИдентификаторыОбъектовРасширений.Ссылка,
	|	ИдентификаторыОбъектовРасширений.ПолноеИмя
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовРасширений КАК ИдентификаторыОбъектовРасширений
	|ГДЕ
	|	ИдентификаторыОбъектовРасширений.Родитель.Наименование = ""Роли""
	|	И ИдентификаторыОбъектовРасширений.ПолноеИмя В(&ПолныеИмена)";
	Запрос.УстановитьПараметр("ПолныеИмена", МассивИмен);
	Выборка = Запрос.Выполнить().Выбрать();
	СоответствияРолей = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		СоответствияРолей.Вставить(Выборка.ПолноеИмя, Выборка.Ссылка);
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Объект.СоответствиеРолей Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.НоваяРоль) И ЗначениеЗаполнено(СтрокаТЧ.НоваяРольИмя) Тогда
			СтрокаТЧ.НоваяРоль = СоответствияРолей.Получить(СтрокаТЧ.НоваяРольИмя);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции // НайтиРоль()

&НаКлиенте
Процедура СоответствиеРолейНоваяРольПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоответствиеРолей.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.НоваяРоль) Тогда
			ТекущиеДанные.Действие = "Заменить";
		Иначе
			ТекущиеДанные.Действие = "Пропустить";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СоответствиеРолейНоваяРольПриИзменении()
